npm create vite@latest 
npm install
npm run dev 

public todos publicos 
imagens videos e etc 
 existem 3 jeitos de fazer css no react 
 1 external 
 2 modules
 3 inline

 props 
 um elmento filho 

 useSate() recebe um elemnto inicial e pode ir mudando com o segundo elemento do destructure
 useEffect() 
 diz pro react fazer alguma coisa quando algume elemento estiver renderizado
 1-useEffect(()=> {}) run after every re-render 
 2-useEffect(()=> {},[]) run only mount
 3-useEffect(()=> {},[value]) run on mount + when value change

 usos
 eventos 
 dom manipulation
 subscriptions (real time updates)
 feching  data from an api
 clean up when a component unmounts


 export default function MyComponent4() {
    const [count,setCount] = useState(0)
    useEffect(()=>{
        document.title = `count ${count}`
    })
function addCount(){
    setCount(c => c+1)
}
  return (
   <>
   <p>count:{count}</p>
   <button onClick={addCount}>add</button>
   </>
  )
} useEffect esta interagindo ao mesmo tempo que o useSate() vai atualizando 
entao pode servir para enviar uma coisa enquanto recebe outro , e quando coloca
um [] como segundo parametro do effect ele s√≥ vai interagir uma vez ao mesmo tempo

useContext()
permite compartilhar valores com multiplos levels de componentes
como no exemplo component a , b, c, d um vai passando os valores pro outro 
mas com o useContext() eu posso passar de uma vez so 
3 steps
1- importaR {createContext}  from 'react'
2- export const MyContext = createContext()
3-
<myContext.provider value={value}>
?Child />
<myContext.provider>

useRef()
quando eu quero que um componente remember de uma informacao
mas nao que essa informacao faca novas renderizacoes
 em vez de ficar fazendo sempre um destructure com o useState()
 use ref ja faz essa funcao 
 var ref = useRef(1)
 ref.current++
 console.log(ref.current) retorna 2
